
// ----------------------------------------- Animation Keyframe -----------------------------------------


// Animation keyframes

 /*exmaple @include keyframes(ANIMATIONNAME) {
    0% { property:value }
    100% { property:value }
  }*/

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}


@mixin animation($animate...) {
    $max: length($animate);
    $animations: '';

    @for $i from 1 through $max {
        $animations: #{$animations + nth($animate, $i)};

        @if $i < $max {
            $animations: #{$animations + ", "};
        }
    }
    -webkit-animation: $animations;
    -moz-animation:    $animations;
    -o-animation:      $animations;
    animation:         $animations;
}



// ----------------------------------------- Custom Break Point -----------------------------------------

/*.someclass {
  @include breakpoint-c-max(500px) { width: 60%; }
}*/

// @mixin breakpoint-c-max($point) {
//   @media (max-width: $point) { @content; }  
// }

// @mixin breakpoint-c-min($point) {
//   @media (min-width: $point) { @content; }  
// }

 

// ----------------------------------------- Position -----------------------------------------

/* Usage
  @include absolute(top 0 left 1em);
*/

// @mixin position($position, $args) {
//   @each $o in top right bottom left {
//         $i: index($args, $o);
 
//     @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number  {
//           #{$o}: nth($args, $i + 1);
//     }
//   }
 
//   position: $position;
// }
 
// @mixin absolute($args) {
//         @include position( absolute, $args);
// }
 
// @mixin fixed($args) {
//         @include position( fixed, $args);
// }
 
// @mixin relative($args) {
//         @include position( relative, $args);
// }

// ----------------------------------------- Image Background -----------------------------------------

// use img as background 
/*
@include: image("path/to/image");
 automatically detect width and height*/

// @mixin image($image) {
  
//     background: image-url($image) no-repeat;
//     width: image-width($image); height: image-height($image); 
    
// }


// ----------------------------------------- delay transition effect -----------------------------------------
// delay time will be increased as more child is created.

@mixin delayRelay( $delayTime, $MaximumNthChild ) {
  @for $i from 1 to $MaximumNthChild {
    &:nth-child(#{$i}) {
     @include transition-delay( $delayTime * $i + s );
    }
  }
}

 